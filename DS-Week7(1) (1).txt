Week7

QN-1:

#include <iostream>
using namespace std;

class Queue{

        private:
                int queue[100], front = -1, rear = -1, size = 0;
        public:
                bool isempty(){
                        return (front == rear);
                }

                bool isfull(){
                        return (rear == 99);
                }

                void enqueue(int ele){
                        if(isfull())
                                cout<<"Queue overflow"<<endl;
                        else
                                queue[++rear] = ele;
                }

                void dequeue(){
                        if(isempty())
                                cout<<"Queue underflow"<<endl;
                        else
                                cout<<"Dequeued element: "<<queue[++front]<<endl;
                }
                void display(){
                        if(isempty()){
                                cout<<"Queue is empty"<<endl;
                                return;
                        }
                        cout<<"Queue: "<<endl;
                        for(int i=rear; i>front; i--)
                                cout<<queue[i]<<" ";
                        cout<<endl;
                }
};

int main(){
        Queue q;
        int choice, val;
        cout<<"1.Enqueue\n2.Dequeue\n3.Display\n4.Exit"<<endl;
        while(true){
                cout<<"Enter your choice: ";
                cin>>choice;
                switch(choice){
                        case 1:{
                                       cout<<"Enter insertion element: ";
                                       cin>>val;
                                       q.enqueue(val);
                                       break;
                                }
                        case 2:{
                                       q.dequeue();
                                      break;
                                }
                        case 3:{
                                       q.display();
                                       break;
                                }
                        case 4:{
                                       cout<<"Exiting program"<<endl;
                                       exit(0);
                                }
                        default:{
                                        cout<<"Invalid Input"<<endl;
                                        break;
                                }
                }
        }
        return 0;
}


QN-2:

#include<iostream>
using namespace std;
#define N 10
#define MAX_STRING_LENGTH 50
class Queue{
private:
int front;
int rear;
char queue[N][MAX_STRING_LENGTH];
void StringCopy(const char* src,char* dest){
int i=0;
while(src[i]!='\0'&&i<MAX_STRING_LENGTH-1){
dest[i]=src[i];
i++;
}
dest[i]='\0';
}
public:
Queue(){
front=rear=-1;
}
void insert(const char* x){
if(isfull()){
cout<<"The queue is full"<<endl;
}else if(isempty()){
front=rear=0;
StringCopy(x,queue[rear]);
}else{
rear=(rear+1)%N;
StringCopy(x,queue[rear]);
}
}
void Delete(){
if(isempty()){
cout<<"The queue is empty"<<endl;
}else if(front==rear){
cout<<"The dequeued element is "<<queue[front]<<endl;
front=rear=-1;
}else{
cout<<"The dequeued element is "<<queue[front]<<endl;
front=(front+1)%N;
}
}
void display(){
if(isempty()){
cout<<"The queue is empty"<<endl;
}else{
int i=front;
cout<<"The elements of the queue are:"<<endl;
while(i!=rear){
cout<<queue[i]<<" ";
i=(i+1)%N;
}
cout<<queue[rear];
cout<<endl;
}
}
int isempty(){
return front==-1&&rear==-1;
}
int isfull(){
return (rear+1)%N==front;
}
void Front(){
if(isempty()){
cout<<"The queue is empty"<<endl;
}else{
cout<<"The front element in the queue is:"<<queue[front]<<endl;
}
}
void Rear(){
if(isempty()){
cout<<"The queue is empty"<<endl;
}else{
cout<<"The rear element in the queue is:"<<queue[rear]<<endl;
}
}
};
int main(){
Queue q;
int choice;
char input[MAX_STRING_LENGTH];
do{
cout<<"Please enter your choice"<<endl;
cout<<"1.Enqueue"<<endl;
cout<<"2.Dequeue"<<endl;
cout<<"3.Display"<<endl;
cout<<"4.Front"<<endl;
cout<<"5.Rear"<<endl;
cout<<"6.Exit"<<endl;
cin>>choice;
switch(choice){
case 1:
cout<<"Please enter element to enqueue:"<<endl;
cin>>input;
q.insert(input);
break;
case 2:
q.Delete();
break;
case 3:
q.display();
break;
case 4:
q.Front();
break;
case 5:
q.Rear();
break;
case 6:
break;
default:
cout<<"Invalid choice"<<endl;
}
}while(choice!=6);
return 0;
}


QN-3:

#include<iostream>
using namespace std;
#define N 10
class Queue{
private:
        int front;
        int rear;
        int queue[N];
public:
        Queue()
        {
                front=rear=-1;
        }
    void enqueue(int x){
        if(isfull()){
            cout<<"The queue is full"<<endl;
        }else if(isempty()){
            front=rear=0;
            queue[rear]=x;
        }else{
            rear=((rear+1)%N);
            queue[rear]=x;
        }
    }
    void dequeue(){
        if(isempty()){
            cout<<"The queue is empty"<<endl;
        }else if(front==rear){
            cout<<"The dequeued element is: "<<queue[front]<<endl;
            front=rear=-1;
        }else{
            cout<<"The dequeued element is: "<<queue[front]<<endl;
            front=((front+1)%N);
        }
    }
    void display(){
        if(isempty())
            cout<<"The queue is empty"<<endl;
        else{
            int i=front;
            cout<<"The elements of the queue are: ";
            while(i!=rear){
                cout<<queue[i]<<" ";
                i=((i+1)%N);
            }
            cout<<queue[rear];
            cout<<endl;
        }
    }
    int isempty(){
        if(front==-1 && rear==-1)
            return 1;
        else
            return 0;
    }
    int isfull(){
        if(((rear+1)%N)==front)
            return 1;
        else
            return 0;
    }
    void Front(){
        if(isempty())
            cout<<"The queue is empty"<<endl;
        else
            cout<<"The front element in the queue is "<<queue[front]<<endl;
    }
    void Rear(){
        if(isempty())
            cout<<"The queue is empty"<<endl;
        else{
            cout<<"The rear element in the queue is "<<queue[rear]<<endl;
        }
    }
};
int main()
{
        Queue q;
        int choice,a;
        cout<<"Circular Array Operations: "<<endl;
        cout<<"1.Enqueue"<<endl;
        cout<<"2.Dequeue"<<endl;
        cout<<"3.Display"<<endl;
        cout<<"4.Front"<<endl;
        cout<<"5.Rear"<<endl;
        cout<<"6.exit"<<endl;
        do{
            cout<<"Enter your choice: ";
            cin>>choice;
            switch(choice){
                    case 1:
                        cout<<"Enter element to enqueue: ";
                        int c;
                        cin>>c;
                        q.enqueue(c);
                        break;
                    case 2:
                        q.dequeue();
                        break;
                    case 3:
                        q.display();
                        break;
                    case 4:
                        q.Front();
                        break;
                    case 5:
                        q.Rear();
                        break;
                    case 6:
                        cout<<"Exiting Program"<<endl;
                        break;
                    default:
                        cout<<"Invalid Input"<<endl;
        }
    }while(choice!=6);
    return 0;
}